---

- name: create {{ application_service_account }} service account
  oc_serviceaccount:
    oc_binary: "{{ openshift_cli }}"
    state: present
    name: "{{ application_service_account }}"
    namespace: "{{ namespace }}"

- name: give cluster view privileges to {{ application_service_account }} service account
  oc_adm_policy_user:
    state: present
    oc_binary: "{{ openshift_cli }}"
    resource_kind: role
    resource_name: view
    user: "system:serviceaccount:{{ namespace }}:{{ application_service_account }}"
    namespace: "{{ namespace }}"
    rolebinding_name: "{{ application_service_account }}-view"

- name: generate admin password
  set_fact:
    mongodb_admin_password: "{{ lookup('password', '{{ work_dir }}/passwordfile chars=ascii_letters length=12') }}"

- name: copy mongodb template
  template:
    src: "{{ resources_dir }}/{{ mongodb_template }}"
    dest: "{{ work_dir }}/mongodb.yml"

- name: check if mongodb is deployed
  oc_obj:
    oc_binary: "{{ openshift_cli }}"
    state: list
    kind: dc
    name: "{{ mongodb_database_service }}"
    namespace: "{{ namespace }}"
  register: result

- name: deploy mongodb
  oc_list:
    state: present
    oc_binary: "{{ openshift_cli }}"
    namespace: "{{ namespace }}"
    files:
      - "{{ work_dir }}/mongodb.yml"
  when: result.ansible_module_results.stderr is defined and result.ansible_module_results.stderr != ""

- name: wait until mongodb is up
  shell: "{{ openshift_cli }} get dc {{ mongodb_database_service }} -o template --template={{ json_template }} -n {{ namespace }}"
  vars:
    json_template: '\{\{.status.readyReplicas\}\}'
  register: result
  until: result.stdout == "1"
  retries: 10
  delay: 30
  changed_when: false

- name: copy application properties template
  template:
    src: "{{ resources_dir }}/{{ application_properties }}"
    dest: "{{ work_dir }}/{{ application_properties }}"

- name: create {{ application_configmap }} application configmap
  oc_configmap:
    oc_binary: "{{ openshift_cli }}"
    state: present
    name: "{{ application_configmap }}"
    namespace: "{{ namespace }}"
    from_file:
      dir: "{{ work_dir }}/{{ application_properties }}"

# logging configmap
- name: set logging template fact
  set_fact:
    logging_configmap_template: logback.xml

- name: set logging template fact
  set_fact:
    logging_configmap_template: logback-dev.xml
  when: >
    logging_style is defined and logging_style == "dev"

- name: copy {{ logging_configmap }} configmap template
  template: 
    src: "{{ resources_dir }}/{{ logging_configmap_template }}" 
    dest: "{{ work_dir }}/logback.xml"

- name: create {{ logging_configmap }} configmap
  oc_configmap:
    oc_binary: "{{ openshift_cli }}"
    state: present
    namespace: "{{ namespace }}"
    name: "{{ logging_configmap }}"
    from_file:
      logback.xml: "{{ work_dir }}/logback.xml"

- name: copy build config template
  template:
    src: "{{ resources_dir }}/{{ buildconfig_template }}"
    dest: "{{ work_dir }}/{{ buildconfig_template }}"

- name: create build config in the {{ namespace_tools }} namespace
  oc_obj:
    oc_binary: "{{ openshift_cli }}"
    state: present
    namespace: "{{ namespace_tools }}"
    kind: buildconfig
    name: "{{ buildconfig_name }}"
    files:
      - "{{ work_dir }}/{{ buildconfig_template }}"

- name: copy imagestream template
  template:
    src: "{{ resources_dir }}/{{ imagestream_template }}"
    dest: "{{ work_dir }}/{{ imagestream_template }}"

- name: create output imagestream in the {{ namespace_tools }} project
  oc_obj:
    oc_binary: "{{ openshift_cli }}"
    state: present
    namespace: "{{ namespace_tools }}"
    kind: imagestream
    name: "{{ imagestream_name }}"
    files:
      - "{{ work_dir }}/{{ imagestream_template }}"

- name: create output imagestream in the {{ namespace }} project
  oc_obj:
    oc_binary: "{{ openshift_cli }}"
    state: present
    namespace: "{{ namespace }}"
    kind: imagestream
    name: "{{ imagestream_name }}"
    files:
      - "{{ work_dir }}/{{ imagestream_template }}"

- name: copy application template
  template:
    src: "{{ resources_dir }}/{{ application_template }}"
    dest: "{{ work_dir }}/{{ application_template }}"

- name: check if {{ application_name }} application is deployed
  oc_obj:
    oc_binary: "{{ openshift_cli }}"
    state: list
    namespace: "{{ namespace }}"
    name: "{{ application_name }}"
    kind: dc
  register: result

- name: deploy {{ application_name }} application
  oc_list:
    oc_binary: "{{ openshift_cli }}"
    state: present
    namespace: "{{ namespace }}"
    files:
      - "{{ work_dir }}/{{ application_template }}"
  when: result.ansible_module_results.stderr is defined and result.ansible_module_results.stderr != ""

# put requests
# export MAPBOX_URL=mapbox-simulator-emergency-response-demo.apps.cluster-4c35.4c35.example.opentlc.com
# for file in ./*; do echo $file; filename=$(basename -- "$file");filename="${filename%.*}"; echo ${filename}; curl -X PUT -H "Content-Type: application/json" -d @${file} "http://${MAPBOX_URL}/directions/v5/mapbox/driving/$filename"; done

# get request
# curl -H "Accept: application/json" "http://mapbox-simulator-emergency-response-demo.apps.cluster-4c35.4c35.example.opentlc.com/directions/v5/mapbox/driving/-77.90999,34.18323;-77.84856,34.18408;-77.94900,34.17060"