---

- name: create {{ service_account }} service account for {{ application_name }} application
  oc_serviceaccount:
    oc_binary: "{{ openshift_cli }}"
    state: present
    name: "{{ service_account }}"
    namespace: "{{ namespace }}"

- name: give cluster view privileges to {{ service_account }} service account
  oc_adm_policy_user:
    state: present
    oc_binary: "{{ openshift_cli }}"
    resource_kind: role
    resource_name: view
    user: "system:serviceaccount:{{ namespace }}:{{ service_account }}"
    namespace: "{{ namespace }}"
    rolebinding_name: "{{ service_account }}-view"

- name: add scc privileged to {{ service_account }} service account
  shell: "{{ openshift_cli }} adm policy add-scc-to-user privileged -z {{ service_account }} -n {{ namespace }}"

- name: add scc anyuid to {{ service_account }} service account
  shell: "{{ openshift_cli }} adm policy add-scc-to-user anyuid -z {{ service_account }} -n {{ namespace }}"

- name: copy {{ application_configmap }} configmap template
  template:
    src: "{{ resources_dir }}/application.properties"
    dest: "{{ work_dir }}/app-config.properties"

- name: create {{ application_configmap }} application configmap
  oc_configmap:
    oc_binary: "{{ openshift_cli }}"
    state: present
    name: "{{ application_configmap }}"
    namespace: "{{ namespace }}"
    from_file:
      dir: "{{ work_dir }}/app-config.properties"

# logging configmap
- name: set logging template fact
  set_fact:
    logging_configmap_template: logback.xml

- name: set logging template fact
  set_fact:
    logging_configmap_template: logback-dev.xml
  when: >
    logging_style is defined and logging_style == "dev"

- name: copy {{ logging_configmap }} configmap template
  template:
    src: "{{ resources_dir }}/{{ logging_configmap_template }}"
    dest: "{{ work_dir }}/logback.xml"

- name: create {{ logging_configmap }} configmap
  oc_configmap:
    oc_binary: "{{ openshift_cli }}"
    state: present
    namespace: "{{ namespace }}"
    name: "{{ logging_configmap }}"
    from_file:
      logback.xml: "{{ work_dir }}/logback.xml"

- name: copy build config template
  template:
    src: "{{ resources_dir }}/{{ buildconfig_template }}"
    dest: "{{ work_dir }}/{{ buildconfig_template }}"

- name: create build config in the {{ namespace_tools }} project
  oc_obj:
    oc_binary: "{{ openshift_cli }}"
    state: present
    namespace: "{{ namespace_tools }}"
    kind: buildconfig
    name: "{{ buildconfig_name }}"
    files:
      - "{{ work_dir }}/{{ buildconfig_template }}"

- name: copy imagestream template
  template:
    src: "{{ resources_dir }}/{{ imagestream_template }}"
    dest: "{{ work_dir }}/{{ imagestream_template }}"

- name: create output imagestream in the {{ namespace_tools }} project
  oc_obj:
    oc_binary: "{{ openshift_cli }}"
    state: present
    namespace: "{{ namespace_tools }}"
    kind: imagestream
    name: "{{ imagestream_name }}"
    files:
      - "{{ work_dir }}/{{ imagestream_template }}"

- name: create output imagestream in the {{ namespace }} project
  oc_obj:
    oc_binary: "{{ openshift_cli }}"
    state: present
    namespace: "{{ namespace }}"
    kind: imagestream
    name: "{{ imagestream_name }}"
    files:
      - "{{ work_dir }}/{{ imagestream_template }}"

- name: give edit permissions to system:serviceaccount:{{ namespace_tools }}:jenkins in project {{ namespace }}
  oc_adm_policy_user:
    state: present
    oc_binary: "{{ openshift_cli }}"
    rolebinding_name: jenkins-edit
    namespace: "{{ namespace }}"
    resource_kind: role
    user: "system:serviceaccount:{{ namespace_tools }}:jenkins"
    resource_name: edit

- set_fact:
    github_secret: "{{ lookup('password', work_dir + '/github chars=ascii_letters,digits length=8') }}"

- set_fact:
    generic_secret: "{{ lookup('password', work_dir + '/generic chars=ascii_letters,digits length=8') }}"

- name: copy pipeline template
  template:
    src: "{{ resources_dir }}/{{ pipeline_buildconfig_template }}"
    dest: "{{ work_dir }}/{{ pipeline_buildconfig_template }}"

- name: create the {{ pipeline_buildconfig_name }} pipeline in the {{ namespace_tools }} project
  oc_obj:
    state: present
    oc_binary: "{{ openshift_cli }}"
    name: "{{ pipeline_buildconfig_name }}"
    namespace: "{{ namespace_tools }}"
    kind: bc
    files:
      - "{{ work_dir }}/{{ pipeline_buildconfig_template }}"

- name: copy application template
  template:
    src: "{{ resources_dir }}/{{ application_template }}"
    dest: "{{ work_dir }}/{{ application_template }}"

- name: check if {{ application_name }} application is deployed
  oc_obj:
    oc_binary: "{{ openshift_cli }}"
    state: list
    namespace: "{{ namespace }}"
    name: "{{ application_name }}"
    kind: dc
  register: result

- name: deploy {{ application_name }} application
  oc_list:
    oc_binary: "{{ openshift_cli }}"
    state: present
    namespace: "{{ namespace }}"
    files:
      - "{{ work_dir }}/{{ application_template }}"
  when: result.ansible_module_results.stderr is defined and result.ansible_module_results.stderr != ""
