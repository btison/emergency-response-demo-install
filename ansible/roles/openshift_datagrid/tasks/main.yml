---

- name: "Create operatorgroup in {{ namespace }}"
  import_role:
    name: operatorgroup
  vars:
    operatorgroup_namespace: "{{ namespace }}"

- name: get packagemanifest for datagrid operator operator
  oc_obj:
    oc_binary: "{{ openshift_cli }}"
    state: list
    kind: packagemanifest
    namespace: openshift-marketplace
    name: "{{ datagrid_operator_packagemanifest }}"
  register: r_packagemanifest_datagrid

- name: set facts for datagird operator
  set_fact:
    datagrid_operator_subscription_package_name: "{{ r_packagemanifest_datagrid.ansible_module_results.results[0].status.packageName }}"
    datagrid_operator_subscription_catalog_source: "{{ r_packagemanifest_datagrid.ansible_module_results.results[0].status.catalogSource }}"
    datagrid_operator_subscription_catalog_source_namespace: "{{ r_packagemanifest_datagrid.ansible_module_results.results[0].status.catalogSourceNamespace }}"

- name: "copy template for {{ datagrid_operator_subscription_name }} subscription resource"
  template:
    src: "{{ resources_dir }}/{{ datagrid_operator_subscription_template }}"
    dest: "{{ work_dir }}/datagrid-subscription.yml"
  vars:
    subscription_name: "{{ datagrid_operator_subscription_name }}"
    subscription_catalog_source: "{{ datagrid_operator_subscription_catalog_source }}"
    subscription_catalog_source_namespace: "{{ datagrid_operator_subscription_catalog_source_namespace }}"
    subscription_channel: "{{ datagrid_operator_subscription_channel }}"
    subscription_package_name: "{{ datagrid_operator_subscription_package_name }}"
    subscription_automatic_installplan_approval: "{{ datagrid_operator_subscription_automatic_installplan_approval }}"
    subscription_starting_csv: "{{ datagrid_operator_subscription_starting_csv }}"

- name: "Create datagrid subscription"
  oc_obj:
    state: present
    oc_binary: "{{ openshift_cli }}"
    name: "{{ datagrid_operator_subscription_name }}"
    namespace: "{{ namespace }}"
    kind: subscription
    files:
      - "{{ work_dir }}/datagrid-subscription.yml"

- name: wait until installplan is created
  oc_obj:
    state: list
    oc_binary: "{{ openshift_cli }}"
    kind: InstallPlan
    namespace: "{{ namespace }}"
  register: r_install_plan
  retries: 30
  delay: 5
  until:
    - r_install_plan.ansible_module_results.results | length > 0
    - r_install_plan | to_json | from_json | json_query(jmesquery) | length > 0
  vars:
    jmesquery: "ansible_module_results.results[0].items[*].spec.clusterServiceVersionNames[] | [?contains(@, 'datagrid-operator') == `true`]"

- name: manually approve installplan
  when: not datagrid_operator_subscription_automatic_installplan_approval
  block:
  - name: set install plan name
    set_fact:
      datagrid_operator_install_plan_name: "{{ r_install_plan.ansible_module_results.results[0]['items'] | to_json | from_json | json_query(query) }}"
    vars:
      query: >-
        [?starts_with(spec.clusterServiceVersionNames[0], 'datagrid-operator')].metadata.name|[0]

  - name: approve installplan
    shell: |
      {{ openshift_cli }} patch installplan {{ datagrid_operator_install_plan_name }} --type='merge' -p '{"spec":{"approved":true}}' -n {{ namespace }}

- name: "Wait until datagrid operator is active"
  oc_obj:
    state: list
    oc_binary: "{{ openshift_cli }}"
    kind: Deployment
    name: "{{ datagrid_operator_deployment_name }}"
    namespace: "{{ namespace }}"
  register: r_datagrid_operator_deployment
  retries: 30
  delay: 10
  changed_when: false
  until:
    - r_datagrid_operator_deployment.ansible_module_results.results[0].status.readyReplicas is defined
    - r_datagrid_operator_deployment.ansible_module_results.results[0].status.replicas is defined
    - >-
      r_datagrid_operator_deployment.ansible_module_results.results[0].status.readyReplicas ==
      r_datagrid_operator_deployment.ansible_module_results.results[0].status.replicas

# deploy datagrid
- name: check if datagrid is deployed
  oc_obj:
    state: list
    oc_binary: "{{ openshift_cli }}"
    name: "{{ datagrid_application_name }}"
    namespace: "{{ namespace }}"
    kind: infinispan
  register: resource_status

- set_fact:
    register_infinispan: "{{ resource_status.ansible_module_results.results[0].status.conditions[0].status }}" 
  when: resource_status.ansible_module_results.results[0].status is defined

- block:

  # set infinispan user credentials
  - name: "copy {{ resources_dir }}/connect_secret.yml"
    template:
      src: "{{ resources_dir }}/connect_secret.yml"
      dest: "{{ work_dir }}/connect_secret.yml"

  - name: "create infinispan secret"
    oc_obj:
      state: present
      oc_binary: "{{ openshift_cli }}"
      name: "{{ datagrid_connect_secret }}"
      namespace: "{{ namespace }}"
      kind: secret
      files:
        - "{{ work_dir }}/connect_secret.yml"

  - name: "copy {{ resources_dir }}/datagrid_cr.yml "
    template:
      src: "{{ resources_dir }}/datagrid_cr.yml"
      dest: "{{ work_dir }}/datagrid-cr.yml"

  - name: "Create infinispan"
    oc_obj:
      state: present
      oc_binary: "{{ openshift_cli }}"
      name: "{{ datagrid_application_name }}"
      namespace: "{{ namespace }}"
      kind: infinispan
      files:
        - "{{ work_dir }}/datagrid-cr.yml"

  - name: "wait until infinispan statefulset has started, replicas = {{ number_of_replicas }}"
    oc_obj:
      state: list
      oc_binary: "{{ openshift_cli }}"
      kind: statefulset
      name: "{{ datagrid_application_name }}"
      namespace: "{{ namespace }}"
    register: r_datagrid_statefulset
    retries: 30
    delay: 10
    until:
      - r_datagrid_statefulset.ansible_module_results.results[0].status is defined
      - r_datagrid_statefulset.ansible_module_results.results[0].status.currentReplicas == number_of_replicas

  when: >
    register_infinispan is not defined or
    register_infinispan is none or
    register_infinispan != True
