---

- name: get catalog source for tekton operator
  shell: |-
    {{ openshift_cli }} get packagemanifests {{ tekton_operator_package_name }} -o jsonpath='{.status.catalogSource}'
  register: r_tekton_catalog_source

- name: get catalog source namespace for tekton operator
  shell: |-
    {{ openshift_cli }} get packagemanifests {{ tekton_operator_package_name }} -o jsonpath='{.status.catalogSourceNamespace}'
  register: r_tekton_catalog_source_namespace

- name: get default channel for tekton operator
  shell: |-
    {{ openshift_cli }} get packagemanifests {{ tekton_operator_package_name }} -o jsonpath='{.status.defaultChannel}'
  register: r_tekton_subscription_channel

- name: get package name for tekton operator
  shell: |-
    {{ openshift_cli }} get packagemanifests {{ tekton_operator_package_name }} -o jsonpath='{.status.packageName}'
  register: r_tekton_subscription_package_name

- name: "copy template for {{ tekton_subscription_name }} subscription resource"
  template:
    src: "{{ resources_dir }}/{{ tekton_subscription_template }}"
    dest: "{{ work_dir }}/{{ tekton_subscription_template }}"
  vars:
    tekton_catalog_source: "{{ r_tekton_catalog_source.stdout }}"
    tekton_catalog_source_namespace: "{{ r_tekton_catalog_source_namespace.stdout }}"
    tekton_subscription_channel: "{{ r_tekton_subscription_channel.stdout }}"
    tekton_subscription_package_name: "{{ r_tekton_subscription_package_name.stdout }}"

- name: "create subscription for tekton operator in {{ tekton_operator_namespace }}"
  oc_obj:
    state: present
    oc_binary: "{{ openshift_cli }}"
    name: "{{ tekton_subscription_name }}"
    namespace: "{{ tekton_operator_namespace }}"
    kind: Subscription
    files:
      - "{{ work_dir }}/{{ tekton_subscription_template }}"

- name: wait until installplan is created
  oc_obj:
    state: list
    oc_binary: "{{ openshift_cli }}"
    kind: InstallPlan
    namespace: "{{ tekton_operator_namespace }}"
  register: tekton_install_plan
  retries: 30
  delay: 5
  until:
    - tekton_install_plan.ansible_module_results.results | length > 0
    - tekton_install_plan | to_json | from_json | json_query(jmesquery) | length > 0
  vars:
    jmesquery: "ansible_module_results.results[0].items[*].spec.clusterServiceVersionNames[] | [?contains(@, 'openshift-pipelines-operator') == `true`]"

- name: manually approve installplan
  when: not tekton_operator_automatic_installplan_approval
  block:
  - name: set install plan name
    set_fact:
      install_plan_name: "{{ tekton_install_plan.ansible_module_results.results[0]['items'] | to_json | from_json | json_query(query) }}"
    vars:
      query: >-
        [?starts_with(spec.clusterServiceVersionNames[0], 'openshift-pipelines-operator')].metadata.name|[0]

  - name: approve installplan
    shell: |
      {{ openshift_cli }} patch installplan {{ install_plan_name }} --type='merge' -p '{"spec":{"approved":true}}' -n {{ tekton_operator_namespace }} 

- name: find all tekton related CSVs
  set_fact:
    tekton_csvs:  "{{ tekton_install_plan.ansible_module_results.results[0]['items'] | to_json | from_json | json_query(query) }}"
  vars:
    query: >-
      [?starts_with(spec.clusterServiceVersionNames[0], 'openshift-pipelines-operator')].spec.clusterServiceVersionNames

- name: wait until all CSVs are succeeded
  oc_obj:
    state: list
    oc_binary: "{{ openshift_cli }}"    
    kind: ClusterServiceVersion
    name: "{{ item }}"
    namespace: "{{ tekton_operator_namespace }}"
  register: tekton_csv
  retries: 180
  delay: 10
  until:
  - tekton_csv.ansible_module_results.results[0].status.phase is defined
  - tekton_csv.ansible_module_results.results[0].status.phase | length > 0
  - tekton_csv.ansible_module_results.results[0].status.phase == "Succeeded"
  loop: "{{ tekton_csvs[0] }}"

- name: "copy template for {{ tekton_git_clone_workspace_name }} task"
  template:
    src: "{{ resources_dir }}/{{ tekton_git_clone_workspace_template }}"
    dest: "{{ work_dir }}/{{ tekton_git_clone_workspace_template }}"

- name: "create the {{ tekton_git_clone_workspace_name }} tekton task in the {{ namespace_tools }} project"
  oc_obj:
    state: present
    oc_binary: "{{ openshift_cli }}"
    name: "{{ tekton_git_clone_workspace_name }}"
    namespace: "{{ namespace_tools }}"
    kind: task
    files:
      - "{{ work_dir }}/{{ tekton_git_clone_workspace_template }}"

- name: "copy template for {{ tekton_maven_build_task_name }} task"
  template:
    src: "{{ resources_dir }}/{{ tekton_maven_build_task_template }}"
    dest: "{{ work_dir }}/{{ tekton_maven_build_task_template }}"

- name: "create the {{ tekton_maven_build_task_name }} tekton task in the {{ namespace_tools }} project"
  oc_obj:
    state: present
    oc_binary: "{{ openshift_cli }}"
    name: "{{ tekton_maven_build_task_name }}"
    namespace: "{{ namespace_tools }}"
    kind: task
    files:
      - "{{ work_dir }}/{{ tekton_maven_build_task_template }}"

- name: "copy template for {{ tekton_maven_publish_task_name }} task"
  template:
    src: "{{ resources_dir }}/{{ tekton_maven_publish_task_template }}"
    dest: "{{ work_dir }}/{{ tekton_maven_publish_task_template }}"

- name: "create the {{ tekton_maven_publish_task_name }} tekton task in the {{ namespace_tools }} project"
  oc_obj:
    state: present
    oc_binary: "{{ openshift_cli }}"
    name: "{{ tekton_maven_publish_task_name }}"
    namespace: "{{ namespace_tools }}"
    kind: task
    files:
      - "{{ work_dir }}/{{ tekton_maven_publish_task_template }}"

- name: "copy template for {{ tekton_deploy_task_name }} task"
  template:
    src: "{{ resources_dir }}/{{ tekton_deploy_task_template }}"
    dest: "{{ work_dir }}/{{ tekton_deploy_task_template }}"

- name: "create the {{ tekton_deploy_task_name }} tekton task in the {{ namespace_tools }} project"
  oc_obj:
    state: present
    oc_binary: "{{ openshift_cli }}"
    name: "{{ tekton_deploy_task_name }}"
    namespace: "{{ namespace_tools }}"
    kind: task
    files:
      - "{{ work_dir }}/{{ tekton_deploy_task_template }}"

- name: "copy template for {{ tekton_buildah_task_name }} task"
  template:
    src: "{{ resources_dir }}/{{ tekton_buildah_task_template }}"
    dest: "{{ work_dir }}/{{ tekton_buildah_task_template }}"

- name: "create the {{ tekton_buildah_task_name }} tekton task in the {{ namespace_tools }} project"
  oc_obj:
    state: present
    oc_binary: "{{ openshift_cli }}"
    name: "{{ tekton_buildah_task_name }}"
    namespace: "{{ namespace_tools }}"
    kind: task
    files:
      - "{{ work_dir }}/{{ tekton_buildah_task_template }}"

- name: "copy template for {{ tekton_build_deploy_pipeline_name }} pipeline"
  template:
    src: "{{ resources_dir }}/{{ tekton_build_deploy_pipeline_template }}"
    dest: "{{ work_dir }}/{{ tekton_build_deploy_pipeline_template }}"

- name: "create the {{ tekton_build_deploy_pipeline_name }} tekton pipeline in the {{ namespace_tools }} project"
  oc_obj:
    state: present
    oc_binary: "{{ openshift_cli }}"
    name: "{{ tekton_build_deploy_pipeline_name }}"
    namespace: "{{ namespace_tools }}"
    kind: pipeline
    files:
      - "{{ work_dir }}/{{ tekton_build_deploy_pipeline_template }}"

- name: "copy template for {{ tekton_build_publish_pipeline_name }} pipeline"
  template:
    src: "{{ resources_dir }}/{{ tekton_build_publish_pipeline_template }}"
    dest: "{{ work_dir }}/{{ tekton_build_publish_pipeline_template }}"

- name: "create the {{ tekton_build_publish_pipeline_name }} tekton pipeline in the {{ namespace_tools }} project"
  oc_obj:
    state: present
    oc_binary: "{{ openshift_cli }}"
    name: "{{ tekton_build_publish_pipeline_name }}"
    namespace: "{{ namespace_tools }}"
    kind: pipeline
    files:
      - "{{ work_dir }}/{{ tekton_build_publish_pipeline_template }}"