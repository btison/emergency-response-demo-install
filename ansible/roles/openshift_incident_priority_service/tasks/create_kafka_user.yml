---

- name: copy kafka user template
  template:
    src: "{{ resources_dir }}/{{ kafka_user_template }}"
    dest: "{{ work_dir }}/{{ kafka_user_template }}"

- name: create kafka user for incident priority service
  oc_obj:
    oc_binary: "{{ openshift_cli }}"
    state: present
    namespace: "{{ namespace_kafka_cluster }}"
    name: "{{ kafka_user }}"
    kind: kafkauser
    files:
      - "{{ work_dir }}/{{ kafka_user_template }}"

- name: get kafka cluster ca certificate
  oc_secret:
    state: list
    oc_binary: "{{ openshift_cli }}"
    name: "{{ kafka_cluster_ca_secret }}"
    namespace: "{{ namespace_kafka_cluster }}"
    decode: true
  register: kafka_cluster_ca_secret_value

- name: extract certificate from {{ kafka_cluster_ca_secret }}
  shell: "echo \"{{ kafka_cluster_ca_secret_value|json_query(json_query) }}\""
  vars: 
    json_query: results.decoded."ca.crt"
  register: kafka_cluster_ca_certificate_value
  changed_when: false

- name: write certificate to tmp file
  copy: content="{{ kafka_cluster_ca_certificate_value.stdout }}" dest="{{ work_dir }}/{{ kafka_cluster_ca_secret }}.crt"

- name: create JKS truststore
  shell: "keytool -importcert -alias CARoot -file {{ work_dir }}/{{ kafka_cluster_ca_secret }}.crt -keystore {{ work_dir }}/{{ kafka_user_truststore }} -storepass {{ kafka_user_truststore_password }} -noprompt"

- name: get kafka user secret
  oc_secret:
    state: list
    oc_binary: "{{ openshift_cli }}"
    name: "{{ kafka_user_secret }}"
    namespace: "{{ namespace_kafka_cluster }}"
    decode: true
  register: kafka_user_secret_value
  until: kafka_user_secret_value.results.exists == true
  retries: 10
  delay: 10
  changed_when: false

- name: extract certificate from {{ kafka_user_secret }}
  shell: "echo \"{{ kafka_user_secret_value|json_query(json_query) }}\""
  vars: 
    json_query: results.decoded."user.crt"
  register: kafka_user_certificate_value
  changed_when: false

- name: write certificate to tmp file
  copy: content="{{ kafka_user_certificate_value.stdout }}" dest="{{ work_dir }}/{{ kafka_user }}.crt"

- name: extract key from {{ kafka_user_secret }}
  shell: "echo \"{{ kafka_user_secret_value|json_query(json_query) }}\""
  vars: 
    json_query: results.decoded."user.key"
  register: kafka_user_key_value
  changed_when: false

- name: write key to tmp file
  copy: content="{{ kafka_user_key_value.stdout }}" dest="{{ work_dir }}/{{ kafka_user }}.key"

- name: create pkcs12 file from certificate and key
  shell: |
    openssl pkcs12 -export -in {{ work_dir }}/{{ kafka_user }}.crt -inkey {{ work_dir }}/{{ kafka_user }}.key \
    -out {{ work_dir }}/{{ kafka_user }}.p12 -name {{ kafka_user }} -passout "pass:{{ kafka_user_keystore_password }}"

- name: create JKS keystore
  shell: |
    keytool -importkeystore -deststorepass {{ kafka_user_keystore_password }} -srckeystore {{ work_dir }}/{{ kafka_user }}.p12 \
    -srcstoretype PKCS12 -srcstorepass {{ kafka_user_keystore_password }} -alias {{ kafka_user }} -destkeystore {{ work_dir }}/{{ kafka_user_keystore }}

- name: create kafka user keystore and truststore secret
  oc_secret:
    oc_binary: "{{ openshift_cli }}"
    state: present
    namespace: "{{ namespace }}"
    name: "{{ kafka_user_keystore_secret }}"
    type: generic
    files:
      - name: "{{ kafka_user_truststore }}"
        path: "{{ work_dir }}/{{ kafka_user_truststore }}"
      - name: "{{ kafka_user_keystore }}"
        path: "{{ work_dir }}/{{ kafka_user_keystore }}"