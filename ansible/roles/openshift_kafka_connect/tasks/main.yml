---

- name: get postgresql credentials secret
  oc_secret:
    state: list
    oc_binary: "{{ openshift_cli }}"
    namespace: "{{ namespace_postgresql }}"
    decode: true
    name: "{{ postgresql_credentials_secret }}"
  register: postgresql_credentials

- set_fact:
    incident_connector_db_user: "postgres"
    incident_connector_db_password: "{{ postgresql_credentials.ansible_module_results.decoded[\"database-admin-password\"] }}"
    incident_connector_db_name: "{{ postgresql_credentials.ansible_module_results.decoded[\"database-name\"] }}"

- name: copy kafka connect template to work directory
  template:
    src: "{{ resources_dir }}/{{ kafka_connect_template }}"
    dest: "{{ work_dir }}/{{ kafka_connect_template }}"

- name: create kafka connect object 
  oc_obj:
    state: present
    kind: kafkaconnect
    oc_binary: "{{ openshift_cli }}"
    name: "{{ kafka_connect_name }}"
    namespace: "{{ namespace }}"
    files:
      - "{{ work_dir }}/{{ kafka_connect_template }}"

- name: wait until kafka connect is up and running
  shell: "{{ openshift_cli }} get deployment {{ kafka_connect_name }}-connect -o template --template={{ json_template }} -n {{ namespace }}"
  vars:
    json_template: '\{\{.status.readyReplicas\}\}'
    replicas: "{{ kafka_connect_replicas|string }}"
  register: result
  until: result.stdout == replicas
  retries: 20
  delay: 15
  changed_when: false

- name: expose kafka connect service
  oc_route:
    state: present
    oc_binary: "{{ openshift_cli }}"
    namespace: "{{ namespace }}"
    service_name: "{{ kafka_connect_name }}-connect-api"
    name: "{{ kafka_connect_name }}-connect-api"

- name: retrieve kafka connect url
  shell: "{{ openshift_cli }} get route {{ kafka_connect_name }}-connect-api -o jsonpath='{.spec.host}' -n {{ namespace }}"
  register: kafka_connect_url

- name: get postgresql credentials secret
  oc_secret:
    state: list
    oc_binary: "{{ openshift_cli }}"
    namespace: "{{ namespace_postgresql }}"
    decode: true
    name: "{{ postgresql_credentials_secret }}"
  register: postgresql_credentials

- set_fact:
    database_admin_password: "{{ postgresql_credentials.ansible_module_results.decoded[\"database-admin-password\"] }}"

- name: copy kafka connect configuration template to work directory
  template:
    src: "{{ resources_dir }}/{{ kafka_connect_connector }}"
    dest: "{{ work_dir }}/{{ kafka_connect_connector }}"
  vars:
    debezium_connector_db_password: "{{ database_admin_password }}"

- name: check if {{ kafka_connect_name }} debezium connector connector exists
  uri:
    url: "http://{{ kafka_connect_url.stdout }}/connectors/{{ debezium_connector_name }}"
    method: GET
    headers:
      Accept: application/json
    status_code: 200,404
  register: result
  changed_when: false

- name: deploy {{ debezium_connector_name }} debezium connector on Kafka connect
  uri:
    url: "http://{{ kafka_connect_url.stdout }}/connectors"
    method: POST
    headers:
      Content-Type: application/json
      Accept: application/json
    body: "{{ lookup('file', work_dir + '/' + kafka_connect_connector) }}"
    body_format: json
    status_code: 201
  when: result.status|string == "404"