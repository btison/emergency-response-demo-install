apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: {{ tekton_buildah_quarkus_task_name }}
spec:
  workspaces:
    - name: source
  inputs:
    params:
      - name: subdirectory
        description: subdirectory in the workspace with the application source code
        default: 'source'
      - name: artifactDirectory
        description: directory in the subdirectory with the application artifacts
        default: 'upload'
      - name: tlsVerify
        description: verify the TLS on the registry endpoint (for push/pull to a non-TLS registry)
        default: 'false'
      - name: baseImage
        description: base image for Buildah build  
      - name: image
        description: reference of the image buildah will produce.
  steps: 
    - name: dockerfile
      image: {{ base_image }}
      script: |

        SOURCE_DIR="$(workspaces.source.path)/$(inputs.params.subdirectory)"

        ARTIFACT_DIR=$SOURCE_DIR/$(inputs.params.artifactDirectory)

        cat > $ARTIFACT_DIR/Dockerfile <<EOF
        FROM $(inputs.params.baseImage)
        COPY *.jar /deployments/app.jar
        COPY lib /deployments/lib
        EOF

    - name: build
      image: {{ buildah_image }}
      workingDir: $(workspaces.source.path)/$(inputs.params.subdirectory)/$(inputs.params.artifactDirectory)
      command:
        - 'buildah'
        - 'bud'
        - '--tls-verify=$(inputs.params.tlsVerify)'
        - '--layers'
        - '-f'
        - 'Dockerfile'
        - '-t'
        - '$(inputs.params.image)'
        - '.'
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
      securityContext:
        privileged: true

    - name: push
      image: {{ buildah_image }}
      workingDir: $(workspaces.source.path)/$(inputs.params.subdirectory)/$(inputs.params.artifactDirectory)
      command:
        - 'buildah'
        - 'push'
        - '--tls-verify=$(inputs.params.tlsVerify)'
        - '$(inputs.params.image)'
        - 'docker://$(inputs.params.image)'
      volumeMounts:
        - name: varlibcontainers
          mountPath: /var/lib/containers
      securityContext:
        privileged: true
       
  volumes:
    - name: varlibcontainers
      emptyDir: {}

